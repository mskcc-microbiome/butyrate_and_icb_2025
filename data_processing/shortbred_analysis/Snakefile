'''
This Snakefile does:
* Align the metagenomic reads to a protein reference marker db.

We provide the marker db used in our published analysis, but include the rule used to build it 
as a comment here in case anyone wishes to update the marker db. 
'''

from glob import glob
import json
import yaml
import shutil

from pathlib import Path

# Import config file:
configfile: os.path.join(workflow.basedir, "/config.yaml")


# build marker protein reference using shortbred's indentify script

## Note - we provide the exact marker gene reference used, so this step is skipped, we include it for completeness:
#rule builld_marker_ref:
#    input:
#        identify_script='<...shortbred_dir/shortbred_identify.py>',
#        target_fa='<amino acid sequences fastq - example provided in directory>',
#        uniref_ref='<path_to_your_uniref90.fasta reference'>,
#        usearch_path='<path to usearch - in particular: usearch11.0.667_i86linux32>',
#        tmp_dir='<tmp_output dir>'
#    output:
#        '<desired output dir/butyrate_pw_genes_markers.fa>'
#    conda:
#        'envs/shortbred_env.yaml'
#    threads:
#        32
#    shell:
#        '''
#        python {input.identify_script} --goi {input.target_fa} --ref {input.uniref_ref} --markers {output} --usearch {input.usearch_path} --tmp {input.tmp_dir} --threads {threads}
#        '''

rule all:
    input:
        expand('{sample_dir}/{sample}_butyrate.txt', sample_dir = sample_dir, sample = sample_names)

rule cat_preprocessed:
    input:
        R1='{sample_dir}/{sample}_R1.fastq.gz', 
        R2='{sample_dir}/{sample}_R2.fastq.gz'
    output:
        '{sample_dir}/{sample}_cat.fastq.gz'
    shell:
        'cat {input.R1} {input.R2} > {output[0]}'


# Align the reads to the marker protein database using the quantify script

rule quantify_reads:
    input:
        quantify_script=config['quantify_script'],
        markers=config['marker_fastq'],
        usearch_path=config['usearch'], 
        reads='{sample_dir}/{sample}_cat.fastq.gz'
    output:
        '{sample_dir}/{sample}_butyrate.txt'
    conda:
        'envs/shortbred_env.yaml'
    threads:
        32
    params:
        tmp_quant='{sample_dir}/butyrate_tmp_{sample}'
    shell:
        '''
        python {input.quantify_script} --markers {input.markers} --search_program usearch \
            --usearch {input.usearch_path} --threads {threads} \
            --tmp {params.tmp_quant} --wgs {input.reads} --results {output}
        '''


